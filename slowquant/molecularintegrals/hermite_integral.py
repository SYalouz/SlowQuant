import numpy as np
from numba import jit, float64
from slowquant.molecularintegrals.utility import boys_function


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_0_0_0_0(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0 * boys_function(0,p*RPC*RPC)
    return R[0:1,0:1,0:1,0]


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_1_0_0_0(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0.0 * boys_function(0,p*RPC*RPC)
    R[0,0,0,1] = (-2.0*p)**1.0 * boys_function(1,p*RPC*RPC)
    R[0,0,1,0] = ZPC * R[0,0,0,1]
    R[0,1,0,0] = YPC * R[0,0,0,1]
    R[1,0,0,0] = XPC * R[0,0,0,1]
    return R[0:2,0:2,0:2,0]


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_1_0_1_0(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0.0 * boys_function(0,p*RPC*RPC)
    R[0,0,0,1] = (-2.0*p)**1.0 * boys_function(1,p*RPC*RPC)
    R[0,0,1,0] = ZPC * R[0,0,0,1]
    R[0,0,0,2] = (-2.0*p)**2.0 * boys_function(2,p*RPC*RPC)
    R[0,0,1,1] = ZPC * R[0,0,0,2]
    R[0,0,2,0] = 1 * R[0,0,0,1] + ZPC * R[0,0,1,1]
    R[0,1,0,0] = YPC * R[0,0,0,1]
    R[0,1,1,0] = YPC * R[0,0,1,1]
    R[0,1,0,1] = YPC * R[0,0,0,2]
    R[0,2,0,0] = 1 * R[0,0,0,1] + YPC * R[0,1,0,1]
    R[1,0,0,0] = XPC * R[0,0,0,1]
    R[1,0,1,0] = XPC * R[0,0,1,1]
    R[1,1,0,0] = XPC * R[0,1,0,1]
    R[1,0,0,1] = XPC * R[0,0,0,2]
    R[2,0,0,0] = 1 * R[0,0,0,1] + XPC * R[1,0,0,1]
    return R[0:3,0:3,0:3,0]


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_1_1_0_0(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0.0 * boys_function(0,p*RPC*RPC)
    R[0,0,0,1] = (-2.0*p)**1.0 * boys_function(1,p*RPC*RPC)
    R[0,0,1,0] = ZPC * R[0,0,0,1]
    R[0,0,0,2] = (-2.0*p)**2.0 * boys_function(2,p*RPC*RPC)
    R[0,0,1,1] = ZPC * R[0,0,0,2]
    R[0,0,2,0] = 1 * R[0,0,0,1] + ZPC * R[0,0,1,1]
    R[0,1,0,0] = YPC * R[0,0,0,1]
    R[0,1,1,0] = YPC * R[0,0,1,1]
    R[0,1,0,1] = YPC * R[0,0,0,2]
    R[0,2,0,0] = 1 * R[0,0,0,1] + YPC * R[0,1,0,1]
    R[1,0,0,0] = XPC * R[0,0,0,1]
    R[1,0,1,0] = XPC * R[0,0,1,1]
    R[1,1,0,0] = XPC * R[0,1,0,1]
    R[1,0,0,1] = XPC * R[0,0,0,2]
    R[2,0,0,0] = 1 * R[0,0,0,1] + XPC * R[1,0,0,1]
    return R[0:3,0:3,0:3,0]


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_1_1_1_0(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0.0 * boys_function(0,p*RPC*RPC)
    R[0,0,0,1] = (-2.0*p)**1.0 * boys_function(1,p*RPC*RPC)
    R[0,0,1,0] = ZPC * R[0,0,0,1]
    R[0,0,0,2] = (-2.0*p)**2.0 * boys_function(2,p*RPC*RPC)
    R[0,0,1,1] = ZPC * R[0,0,0,2]
    R[0,0,2,0] = 1 * R[0,0,0,1] + ZPC * R[0,0,1,1]
    R[0,0,0,3] = (-2.0*p)**3.0 * boys_function(3,p*RPC*RPC)
    R[0,0,1,2] = ZPC * R[0,0,0,3]
    R[0,0,2,1] = 1 * R[0,0,0,2] + ZPC * R[0,0,1,2]
    R[0,0,3,0] = 2 * R[0,0,1,1] + ZPC * R[0,0,2,1]
    R[0,1,0,0] = YPC * R[0,0,0,1]
    R[0,1,1,0] = YPC * R[0,0,1,1]
    R[0,1,2,0] = YPC * R[0,0,2,1]
    R[0,1,0,1] = YPC * R[0,0,0,2]
    R[0,2,0,0] = 1 * R[0,0,0,1] + YPC * R[0,1,0,1]
    R[0,1,1,1] = YPC * R[0,0,1,2]
    R[0,2,1,0] = 1 * R[0,0,1,1] + YPC * R[0,1,1,1]
    R[0,1,0,2] = YPC * R[0,0,0,3]
    R[0,2,0,1] = 1 * R[0,0,0,2] + YPC * R[0,1,0,2]
    R[0,3,0,0] = 2 * R[0,1,0,1] + YPC * R[0,2,0,1]
    R[1,0,0,0] = XPC * R[0,0,0,1]
    R[1,0,1,0] = XPC * R[0,0,1,1]
    R[1,0,2,0] = XPC * R[0,0,2,1]
    R[1,1,0,0] = XPC * R[0,1,0,1]
    R[1,1,1,0] = XPC * R[0,1,1,1]
    R[1,2,0,0] = XPC * R[0,2,0,1]
    R[1,0,0,1] = XPC * R[0,0,0,2]
    R[2,0,0,0] = 1 * R[0,0,0,1] + XPC * R[1,0,0,1]
    R[1,0,1,1] = XPC * R[0,0,1,2]
    R[2,0,1,0] = 1 * R[0,0,1,1] + XPC * R[1,0,1,1]
    R[1,1,0,1] = XPC * R[0,1,0,2]
    R[2,1,0,0] = 1 * R[0,1,0,1] + XPC * R[1,1,0,1]
    R[1,0,0,2] = XPC * R[0,0,0,3]
    R[2,0,0,1] = 1 * R[0,0,0,2] + XPC * R[1,0,0,2]
    R[3,0,0,0] = 2 * R[1,0,0,1] + XPC * R[2,0,0,1]
    return R[0:4,0:4,0:4,0]


@jit(float64[:,:,:](float64, float64, float64, float64, float64, float64[:,:,:,:]), nopython=True, cache=True)
def R_1_1_1_1(p, XPC, YPC, ZPC, RPC, R):
    R[0,0,0,0] = (-2.0*p)**0.0 * boys_function(0,p*RPC*RPC)
    R[0,0,0,1] = (-2.0*p)**1.0 * boys_function(1,p*RPC*RPC)
    R[0,0,1,0] = ZPC * R[0,0,0,1]
    R[0,0,0,2] = (-2.0*p)**2.0 * boys_function(2,p*RPC*RPC)
    R[0,0,1,1] = ZPC * R[0,0,0,2]
    R[0,0,2,0] = 1 * R[0,0,0,1] + ZPC * R[0,0,1,1]
    R[0,0,0,3] = (-2.0*p)**3.0 * boys_function(3,p*RPC*RPC)
    R[0,0,1,2] = ZPC * R[0,0,0,3]
    R[0,0,2,1] = 1 * R[0,0,0,2] + ZPC * R[0,0,1,2]
    R[0,0,3,0] = 2 * R[0,0,1,1] + ZPC * R[0,0,2,1]
    R[0,0,0,4] = (-2.0*p)**4.0 * boys_function(4,p*RPC*RPC)
    R[0,0,1,3] = ZPC * R[0,0,0,4]
    R[0,0,2,2] = 1 * R[0,0,0,3] + ZPC * R[0,0,1,3]
    R[0,0,3,1] = 2 * R[0,0,1,2] + ZPC * R[0,0,2,2]
    R[0,0,4,0] = 3 * R[0,0,2,1] + ZPC * R[0,0,3,1]
    R[0,1,0,0] = YPC * R[0,0,0,1]
    R[0,1,1,0] = YPC * R[0,0,1,1]
    R[0,1,2,0] = YPC * R[0,0,2,1]
    R[0,1,3,0] = YPC * R[0,0,3,1]
    R[0,1,0,1] = YPC * R[0,0,0,2]
    R[0,2,0,0] = 1 * R[0,0,0,1] + YPC * R[0,1,0,1]
    R[0,1,1,1] = YPC * R[0,0,1,2]
    R[0,2,1,0] = 1 * R[0,0,1,1] + YPC * R[0,1,1,1]
    R[0,1,2,1] = YPC * R[0,0,2,2]
    R[0,2,2,0] = 1 * R[0,0,2,1] + YPC * R[0,1,2,1]
    R[0,1,0,2] = YPC * R[0,0,0,3]
    R[0,2,0,1] = 1 * R[0,0,0,2] + YPC * R[0,1,0,2]
    R[0,3,0,0] = 2 * R[0,1,0,1] + YPC * R[0,2,0,1]
    R[0,1,1,2] = YPC * R[0,0,1,3]
    R[0,2,1,1] = 1 * R[0,0,1,2] + YPC * R[0,1,1,2]
    R[0,3,1,0] = 2 * R[0,1,1,1] + YPC * R[0,2,1,1]
    R[0,1,0,3] = YPC * R[0,0,0,4]
    R[0,2,0,2] = 1 * R[0,0,0,3] + YPC * R[0,1,0,3]
    R[0,3,0,1] = 2 * R[0,1,0,2] + YPC * R[0,2,0,2]
    R[0,4,0,0] = 3 * R[0,2,0,1] + YPC * R[0,3,0,1]
    R[1,0,0,0] = XPC * R[0,0,0,1]
    R[1,0,1,0] = XPC * R[0,0,1,1]
    R[1,0,2,0] = XPC * R[0,0,2,1]
    R[1,0,3,0] = XPC * R[0,0,3,1]
    R[1,1,0,0] = XPC * R[0,1,0,1]
    R[1,1,1,0] = XPC * R[0,1,1,1]
    R[1,1,2,0] = XPC * R[0,1,2,1]
    R[1,2,0,0] = XPC * R[0,2,0,1]
    R[1,2,1,0] = XPC * R[0,2,1,1]
    R[1,3,0,0] = XPC * R[0,3,0,1]
    R[1,0,0,1] = XPC * R[0,0,0,2]
    R[2,0,0,0] = 1 * R[0,0,0,1] + XPC * R[1,0,0,1]
    R[1,0,1,1] = XPC * R[0,0,1,2]
    R[2,0,1,0] = 1 * R[0,0,1,1] + XPC * R[1,0,1,1]
    R[1,0,2,1] = XPC * R[0,0,2,2]
    R[2,0,2,0] = 1 * R[0,0,2,1] + XPC * R[1,0,2,1]
    R[1,1,0,1] = XPC * R[0,1,0,2]
    R[2,1,0,0] = 1 * R[0,1,0,1] + XPC * R[1,1,0,1]
    R[1,1,1,1] = XPC * R[0,1,1,2]
    R[2,1,1,0] = 1 * R[0,1,1,1] + XPC * R[1,1,1,1]
    R[1,2,0,1] = XPC * R[0,2,0,2]
    R[2,2,0,0] = 1 * R[0,2,0,1] + XPC * R[1,2,0,1]
    R[1,0,0,2] = XPC * R[0,0,0,3]
    R[2,0,0,1] = 1 * R[0,0,0,2] + XPC * R[1,0,0,2]
    R[3,0,0,0] = 2 * R[1,0,0,1] + XPC * R[2,0,0,1]
    R[1,0,1,2] = XPC * R[0,0,1,3]
    R[2,0,1,1] = 1 * R[0,0,1,2] + XPC * R[1,0,1,2]
    R[3,0,1,0] = 2 * R[1,0,1,1] + XPC * R[2,0,1,1]
    R[1,1,0,2] = XPC * R[0,1,0,3]
    R[2,1,0,1] = 1 * R[0,1,0,2] + XPC * R[1,1,0,2]
    R[3,1,0,0] = 2 * R[1,1,0,1] + XPC * R[2,1,0,1]
    R[1,0,0,3] = XPC * R[0,0,0,4]
    R[2,0,0,2] = 1 * R[0,0,0,3] + XPC * R[1,0,0,3]
    R[3,0,0,1] = 2 * R[1,0,0,2] + XPC * R[2,0,0,2]
    R[4,0,0,0] = 3 * R[2,0,0,1] + XPC * R[3,0,0,1]
    return R[0:5,0:5,0:5,0]


